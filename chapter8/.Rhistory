title = "Loan requests and disbursements",
xaxis = list(zeroline = T, title = "Amt. requested"),
yaxis = list(zeroline = T, title = "Amt. disbursed")
)
loan_dt[, .(mean(amt_loan), min(amt_loan), max(amt_loan)), by = as.character(tenor_days)]
loan_dt[, .(median(amt_loan), min(amt_loan), max(amt_loan)), by = as.character(tenor_days)]
loan_dt[, .(mean(amt_loan), mean(amt_applied)), amt_applied < 1e6]
loan_dt[, .(mean(amt_loan), max(amt_applied)), amt_applied < 1e6]
loan_dt[, .(max(amt_loan), max(amt_applied)), amt_applied < 1e6]
loan_dt[, .(max(amt_loan), max(amt_applied)), amt_applied < 2e6]
loan_dt[amt_applied > 1e6, .(max(amt_loan), max(amt_applied))]
loan_dt[amt_applied > 1.5e6, .(max(amt_loan), max(amt_applied))]
loan_dt[amt_applied > 1.5e6, .(max(amt_loan), mean(amt_loan))]
library(data.table)
library(magrittr)
tmp <- data.table(x = rnorm(100), e = rnorm(100))
tmp[, y := 12 + 3 * x + e]
tmp
n <- 1e3; tmp <- data.table(x = rnorm(n), e = rnorm(n))
tmp
n <- 1e3; tmp <- data.table(x = rnorm(n), e = rnorm(n)); tmp[, y := 12 + 3 * x + e]
tmp
lm(y ~ x, tmp)
mean(tmp$x)
mean(tmp$y)
sum(tmp$y)/n
library(felm)
library(lfe)
felm(y ~ x, tmp)
X <- tmp[, .(1, x)]
X
X %<>% matrix
X %>% class
X %>% dim
X <- tmp[, .(1, x)] %>% as.matrix()
X %>% class
X %>% dim
crossprod(X)
y <- matrix(data = tmp[,y] %>% unlist(), ncol = 1)
y
crossprod(X, y)
sum(y)
solve(t(X) %*% X) %*% t(X) %*% y
sum(y)
sum(y)/nrow(X)
crossprod(X)
crossprod(y)
crossprod(X,y)
crossprod(X) %>% solve
crossprod(X,y)
# Options
options(stringsAsFactors = F)
# Load desired packages
library(pacman)
p_load(data.table, magrittr)
# Set directory
setwd("/Users/edwardarubin/Dropbox/Research/MyBooks/DataScience/Textbook/chapter8")
dir()
x <- "rollingsales_bronx.xls"
tmp <- read_xls(x)
p_load(data.table, magrittr, readxl)
tmp <- read_xls(x)
tmp
tmp <- read_xls(x, skip = 4)
tmp
tmp <- read_xls(x) %>% data.table()
tmp
tmp
tmp <- read_xls(x, skip = 4) %>% data.table()
tmp
p_load(data.table, magrittr, readxl, stringr)
setnames(tmp, names(tmp) %>% str_to_lower() %>% str_replace_all(" ", "_"))
tmp
tmp[, building_class_category] %>% table
tmp[building_class_category == "10 COOPS - ELEVATOR APARTMENTS"]
tmp[commercial_units == 0 & residential_units == 0, building_class_category] %>% table()
tmp[commercial_units == 0 & residential_units <= 1, building_class_category] %>% table()
tmp[commercial_units == 0 & residential_units <= 1, building_class_at_time_of_sale] %>% table()
tmp[commercial_units == 0 & residential_units <= 1, building_class_category] %>% table()
tmp
# Load data and join data
full_dt <- lapply(
X = c(
"rollingsales_bronx.xls",
"rollingsales_brooklyn.xls",
"rollingsales_manhattan.xls",
"rollingsales_queens.xls",
"rollingsales_statenisland.xls"
),
FUN = function(x) {
# Load
tmp <- read_xls(x, skip = 4) %>% data.table()
# Change names
setnames(tmp, names(tmp) %>% str_to_lower() %>% str_replace_all(" ", "_"))
# Grab some variables
tmp <- tmp[, .(
borough, neighborhood, building_class_category, zip_code,
residential_units, commercial_units, total_units,
land_square_feet, gross_square_feet, year_built,
sale_price, sale_date
)]
# Limit to single-family dwelling types
tmp <- tmp[building_class_category %in% c(
"01 ONE FAMILY DWELLINGS",
"09 COOPS - WALKUP APARTMENTS", "10 COOPS - ELEVATOR APARTMENTS",
"12 CONDOS - WALKUP APARTMENTS", "13 CONDOS - ELEVATOR APARTMENTS",
"17 CONDO COOPS"
)]
# Require sale price > 0
tmp <- tmp[sale_price > 0]
# Return tmp data
return(tmp)
}
) %>% rbindlist()
tmp
full_dt %>% dim
full_dt %>% head
full_dt %>% tail
full_dt$sale_price %>% summary
full_dt$sale_price %>% quantile(probs = 0.05)
full_dt$sale_price %>% quantile(probs = 0.025)
full_dt$sale_price %>% quantile(probs = 0.01)
full_dt$sale_price %>% quantile(probs = 0.025)
full_dt[sale_price > 1, sale_price] %>% quantile(probs = 0.01)
full_dt[sale_price > 100, sale_price] %>% quantile(probs = 0.01)
full_dt[sale_price > 1000, sale_price] %>% quantile(probs = 0.01)
# Load data and join data
full_dt <- lapply(
X = c(
"rollingsales_bronx.xls",
"rollingsales_brooklyn.xls",
"rollingsales_manhattan.xls",
"rollingsales_queens.xls",
"rollingsales_statenisland.xls"
),
FUN = function(x) {
# Load
tmp <- read_xls(x, skip = 4) %>% data.table()
# Change names
setnames(tmp, names(tmp) %>% str_to_lower() %>% str_replace_all(" ", "_"))
# Grab some variables
tmp <- tmp[, .(
borough, neighborhood, building_class_category, zip_code,
residential_units, commercial_units, total_units,
land_square_feet, gross_square_feet, year_built,
sale_price, sale_date
)]
# Limit to single-family dwelling types
tmp <- tmp[building_class_category %in% c(
"01 ONE FAMILY DWELLINGS",
"09 COOPS - WALKUP APARTMENTS", "10 COOPS - ELEVATOR APARTMENTS",
"12 CONDOS - WALKUP APARTMENTS", "13 CONDOS - ELEVATOR APARTMENTS",
"17 CONDO COOPS"
)]
# Require sale price > 1000
tmp <- tmp[sale_price > 0]
# Return tmp data
return(tmp)
}
) %>% rbindlist()
# Load data and join data
full_dt <- lapply(
X = c(
"rollingsales_bronx.xls",
"rollingsales_brooklyn.xls",
"rollingsales_manhattan.xls",
"rollingsales_queens.xls",
"rollingsales_statenisland.xls"
),
FUN = function(x) {
# Load
tmp <- read_xls(x, skip = 4) %>% data.table()
# Change names
setnames(tmp, names(tmp) %>% str_to_lower() %>% str_replace_all(" ", "_"))
# Grab some variables
tmp <- tmp[, .(
borough, neighborhood, building_class_category, zip_code,
residential_units, commercial_units, total_units,
land_square_feet, gross_square_feet, year_built,
sale_price, sale_date
)]
# Limit to single-family dwelling types
tmp <- tmp[building_class_category %in% c(
"01 ONE FAMILY DWELLINGS",
"09 COOPS - WALKUP APARTMENTS", "10 COOPS - ELEVATOR APARTMENTS",
"12 CONDOS - WALKUP APARTMENTS", "13 CONDOS - ELEVATOR APARTMENTS",
"17 CONDO COOPS"
)]
# Require sale price > 1000
tmp <- tmp[sale_price > 1000]
# Return tmp data
return(tmp)
}
) %>% rbindlist()
full_dt %>% dim
full_dt[, sale_price] %>% summary
# Load data and join data
full_dt <- lapply(
X = c(
"rollingsales_bronx.xls",
"rollingsales_brooklyn.xls",
"rollingsales_manhattan.xls",
"rollingsales_queens.xls",
"rollingsales_statenisland.xls"
),
FUN = function(x) {
# Load
tmp <- read_xls(x, skip = 4) %>% data.table()
# Change names
setnames(tmp, names(tmp) %>% str_to_lower() %>% str_replace_all(" ", "_"))
# Grab some variables
tmp <- tmp[, .(
borough, neighborhood, building_class_category, zip_code,
residential_units, commercial_units, total_units,
land_square_feet, gross_square_feet, year_built,
sale_price, sale_date
)]
# Limit to single-family dwelling types
tmp <- tmp[building_class_category %in% c(
"01 ONE FAMILY DWELLINGS",
"09 COOPS - WALKUP APARTMENTS", "10 COOPS - ELEVATOR APARTMENTS",
"12 CONDOS - WALKUP APARTMENTS", "13 CONDOS - ELEVATOR APARTMENTS",
"17 CONDO COOPS"
)]
# Require sale price between 10,000 and 10,000,000
tmp <- tmp[between(sale_price, 1e4, 1e7)]
# Return tmp data
return(tmp)
}
) %>% rbindlist()
full_dt %>% dim
full_dt$sale_price %>% summary
library(ggplot2)
ggplot(data = full_dt, aes(x = gross_square_feet, y = sale_price)) + geom_point()
full_dt[,gross_square_feet] %>% quantile(0.975)
full_dt[,gross_square_feet] %>% quantile(0.025)
full_dt[,gross_square_feet] %>% quantile(0.99)
# Load data and join data
full_dt <- lapply(
X = c(
"rollingsales_bronx.xls",
"rollingsales_brooklyn.xls",
"rollingsales_manhattan.xls",
"rollingsales_queens.xls",
"rollingsales_statenisland.xls"
),
FUN = function(x) {
# Load
tmp <- read_xls(x, skip = 4) %>% data.table()
# Change names
setnames(tmp, names(tmp) %>% str_to_lower() %>% str_replace_all(" ", "_"))
# Grab some variables
tmp <- tmp[, .(
borough, neighborhood, building_class_category, zip_code,
residential_units, commercial_units, total_units,
land_square_feet, gross_square_feet, year_built,
sale_price, sale_date
)]
# Limit to single-family dwelling types
tmp <- tmp[building_class_category %in% c(
"01 ONE FAMILY DWELLINGS",
"09 COOPS - WALKUP APARTMENTS", "10 COOPS - ELEVATOR APARTMENTS",
"12 CONDOS - WALKUP APARTMENTS", "13 CONDOS - ELEVATOR APARTMENTS",
"17 CONDO COOPS"
)]
# Require sale price between 10,000 and 10,000,000
tmp <- tmp[between(sale_price, 1e4, 1e7)]
# Require gross square feet between 0 and 3500
tmp <- tmp[between(gross_square_feet, 1, 3500)]
# Return tmp data
return(tmp)
}
) %>% rbindlist()
tmp
tmp %>% dim
tmp %>% head
ggplot(data = full_dt, aes(x = gross_square_feet, y = sale_price)) + geom_point()
ggplot(data = full_dt, aes(x = gross_square_feet, y = log(sale_price))) + geom_point()
# Load data and join data
full_dt <- lapply(
X = c(
"rollingsales_bronx.xls",
"rollingsales_brooklyn.xls",
"rollingsales_manhattan.xls",
"rollingsales_queens.xls",
"rollingsales_statenisland.xls"
),
FUN = function(x) {
# Load
tmp <- read_xls(x, skip = 4) %>% data.table()
# Change names
setnames(tmp, names(tmp) %>% str_to_lower() %>% str_replace_all(" ", "_"))
# Grab some variables
tmp <- tmp[, .(
borough, neighborhood, building_class_category, zip_code,
residential_units, commercial_units, total_units,
land_square_feet, gross_square_feet, year_built,
sale_price, sale_date
)]
# Limit to single-family dwelling types
tmp <- tmp[building_class_category %in% c(
"01 ONE FAMILY DWELLINGS",
"09 COOPS - WALKUP APARTMENTS", "10 COOPS - ELEVATOR APARTMENTS",
"12 CONDOS - WALKUP APARTMENTS", "13 CONDOS - ELEVATOR APARTMENTS",
"17 CONDO COOPS"
)]
# Require sale price between 10,000 and 10,000,000
tmp <- tmp[between(sale_price, 1e4, 1e7)]
# Require gross square feet between 0 and 3500
tmp <- tmp[between(gross_square_feet, 0, 3500)]
# Return tmp data
return(tmp)
}
) %>% rbindlist()
ggplot(data = full_dt, aes(x = gross_square_feet, y = log(sale_price))) + geom_point()
# Load data and join data
full_dt <- lapply(
X = c(
"rollingsales_bronx.xls",
"rollingsales_brooklyn.xls",
"rollingsales_manhattan.xls",
"rollingsales_queens.xls",
"rollingsales_statenisland.xls"
),
FUN = function(x) {
# Load
tmp <- read_xls(x, skip = 4) %>% data.table()
# Change names
setnames(tmp, names(tmp) %>% str_to_lower() %>% str_replace_all(" ", "_"))
# Grab some variables
tmp <- tmp[, .(
borough, neighborhood, building_class_category, zip_code,
residential_units, commercial_units, total_units,
land_square_feet, gross_square_feet, year_built,
sale_price, sale_date
)]
# Limit to single-family dwelling types
tmp <- tmp[building_class_category %in% c(
"01 ONE FAMILY DWELLINGS",
"09 COOPS - WALKUP APARTMENTS", "10 COOPS - ELEVATOR APARTMENTS",
"12 CONDOS - WALKUP APARTMENTS", "13 CONDOS - ELEVATOR APARTMENTS",
"17 CONDO COOPS"
)]
# Require sale price between 10,000 and 10,000,000
tmp <- tmp[between(sale_price, 1e4, 1e7)]
# Require gross square feet between 0 and 3500
tmp <- tmp[between(gross_square_feet, 0, 3500, incbounds = F)]
# Return tmp data
return(tmp)
}
) %>% rbindlist()
ggplot(data = full_dt, aes(x = gross_square_feet, y = log(sale_price))) + geom_point()
# Load data and join data
full_dt <- lapply(
X = c(
"rollingsales_bronx.xls",
"rollingsales_brooklyn.xls",
"rollingsales_manhattan.xls",
"rollingsales_queens.xls",
"rollingsales_statenisland.xls"
),
FUN = function(x) {
# Load
tmp <- read_xls(x, skip = 4) %>% data.table()
# Change names
setnames(tmp, names(tmp) %>% str_to_lower() %>% str_replace_all(" ", "_"))
# Grab some variables
tmp <- tmp[, .(
borough, neighborhood, building_class_category, zip_code,
residential_units, commercial_units, total_units,
land_square_feet, gross_square_feet, year_built,
sale_price, sale_date
)]
# Limit to single-family dwelling types
tmp <- tmp[building_class_category %in% c(
"01 ONE FAMILY DWELLINGS",
"09 COOPS - WALKUP APARTMENTS", "10 COOPS - ELEVATOR APARTMENTS",
"12 CONDOS - WALKUP APARTMENTS", "13 CONDOS - ELEVATOR APARTMENTS",
"17 CONDO COOPS"
)]
# Require sale price between 10,000 and 10,000,000
tmp <- tmp[between(sale_price, 1e4, 1e7)]
# Require gross square feet between 0 and 5000
tmp <- tmp[between(gross_square_feet, 0, 5000, incbounds = F)]
# Return tmp data
return(tmp)
}
) %>% rbindlist()
ggplot(data = full_dt, aes(x = gross_square_feet, y = log(sale_price))) + geom_point()
ggplot(data = full_dt, aes(x = gross_square_feet, y = (sale_price))) + geom_point()
ggplot(data = full_dt, aes(x = gross_square_feet, y = (sale_price))) + geom_point() + geom_smooth(method = lm)
ggplot(data = full_dt, aes(x = gross_square_feet, y = (sale_price))) + geom_point() + geom_smooth()
tmp %>% dim
ggplot(data = full_dt, aes(x = gross_square_feet, y = (sale_price))) + geom_point() + geom_smooth()
?fread
?fwrite
# Options
options(stringsAsFactors = F)
# Load desired packages
library(pacman)
p_load(data.table, magrittr, readxl, stringr)
# Set directory
setwd("/Users/edwardarubin/Dropbox/Research/MyBooks/DataScience/Textbook/chapter8")
# Load data and join data
full_dt <- lapply(
X = c(
"rollingsales_bronx.xls",
"rollingsales_brooklyn.xls",
"rollingsales_manhattan.xls",
"rollingsales_queens.xls",
"rollingsales_statenisland.xls"
),
FUN = function(x) {
# Load
tmp <- read_xls(x, skip = 4) %>% data.table()
# Change names
setnames(tmp, names(tmp) %>% str_to_lower() %>% str_replace_all(" ", "_"))
# Grab some variables
tmp <- tmp[, .(
borough, neighborhood, building_class_category, zip_code,
residential_units, commercial_units, total_units,
land_square_feet, gross_square_feet, year_built,
sale_price, sale_date
)]
# Limit to single-family dwelling types
tmp <- tmp[building_class_category %in% c(
"01 ONE FAMILY DWELLINGS",
"09 COOPS - WALKUP APARTMENTS", "10 COOPS - ELEVATOR APARTMENTS",
"12 CONDOS - WALKUP APARTMENTS", "13 CONDOS - ELEVATOR APARTMENTS",
"17 CONDO COOPS"
)]
# Require sale price between 10,000 and 10,000,000
tmp <- tmp[between(sale_price, 1e4, 1e7)]
# Require gross square feet between 0 and 5000
tmp <- tmp[between(gross_square_feet, 0, 5000, incbounds = F)]
# Return tmp data
return(tmp)
}
) %>% rbindlist()
# Save
fwrite(
x = full_dt,
file = "home_sales_nyc.csv"
)
library(rmarkdown)
rmarkdown::render("chapter8.Rmd", output_format = html_document(toc = T, toc_float = T))
sale_df %>% head
sale_df
ggplot(data = full_dt, aes(x = gross_square_feet, y = (sale_price/gross_square_fee))) + geom_point() + geom_smooth()
ggplot(data = full_dt, aes(x = gross_square_feet, y = (sale_price/gross_square_feet))) + geom_point() + geom_smooth()
ggplot(data = sale_df, aes(x = gross_square_feet, y = (sale_price/gross_square_feet))) + geom_point() + geom_smooth()
ggplot(data = sale_df, aes(x = gross_square_feel, y = sale_price)) +
geom_point(alpha = 0.5) +
xlab("Property size (gross square feet)") +
ylab("Sale price") +
theme_pander()
ggplot(data = sale_df, aes(x = gross_square_feet, y = sale_price)) +
geom_point(alpha = 0.5) +
xlab("Property size (gross square feet)") +
ylab("Sale price") +
theme_pander()
ggplot(data = sale_df, aes(x = gross_square_feet, y = sale_price)) +
geom_point(alpha = 0.3) +
xlab("Property size (gross square feet)") +
ylab("Sale price") +
theme_pander()
ggplot(data = sale_df, aes(x = gross_square_feet, y = sale_price)) +
geom_point(alpha = 0.3, size = 1) +
xlab("Property size (gross square feet)") +
ylab("Sale price") +
theme_pander()
ggplot(data = sale_df, aes(x = gross_square_feet, y = sale_price)) +
geom_point(alpha = 0.3) +
xlab("Property size (gross square feet)") +
ylab("Sale price") +
theme_pander()
ggplot(data = sale_df, aes(x = gross_square_feet, y = sale_price)) +
geom_point(alpha = 0.3, size = 1.2) +
xlab("Property size (gross square feet)") +
ylab("Sale price") +
theme_pander()
rmarkdown::render("chapter8.Rmd", output_format = html_document(toc = T, toc_float = T))
rmarkdown::render("chapter8.Rmd", output_format = html_document(toc = T, toc_float = T))
rmarkdown::render("chapter8.Rmd", output_format = html_document(toc = T, toc_float = T))
??comma
rmarkdown::render("chapter8.Rmd", output_format = html_document(toc = T, toc_float = T))
reg_est
summary(reg_est)
sale_df %>% head
library(lfe)
felm(sale_price ~ residential_units + commerical_units + land_square_feet | year_built + building_class_category + zip_code, sale_df) %>% summary()
felm(sale_price ~ residential_units + commercial_units + land_square_feet | year_built + building_class_category + zip_code, sale_df) %>% summary()
felm(sale_price ~ residential_units + commercial_units + land_square_feet + I(land_square_feet^2) | year_built + building_class_category + zip_code, sale_df) %>% summary()
felm(sale_price ~ residential_units + commercial_units + land_square_feet | neighborhood + borough + year_built + building_class_category + zip_code, sale_df) %>% summary()
class(reg_est)
rmarkdown::render("chapter8.Rmd", output_format = html_document(toc = T, toc_float = T))
sale_df$gross_square_feet %>% min
sale_df$sale_price %>% min
sale_df$sale_price %>% min
rmarkdown::render("chapter8.Rmd", output_format = html_document(toc = T, toc_float = T))
felm(sale_price ~ residential_units + commercial_units + land_square_feet | neighborhood + borough + year_built + building_class_category + zip_code, sale_df) %>% summary()
felm(I(sale_price/gross_square_feet) ~ residential_units + commercial_units + gross_square_feet | neighborhood + borough + year_built + building_class_category + zip_code, sale_df) %>% summary()
ggplot(data = sale_df, aes(x = gross_square_feet, y = sale_price/gross_square_feet)) +
geom_point(alpha = 0.3, size = 1.2) +
scale_x_continuous("Property size (gross square feet)", labels = scales::comma) +
scale_y_continuous("Sale price (USD)", labels = scales::comma) +
theme_pander()
ggplot(data = sale_df, aes(x = gross_square_feet, y = sale_price/gross_square_feet)) +
geom_point(alpha = 0.3, size = 1.2) +
scale_x_continuous("Property size (gross square feet)", labels = scales::comma) +
scale_y_continuous("Sale price (USD)", labels = scales::comma) +
theme_pander() + geom_smooth()

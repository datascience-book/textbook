# Remove ',$'
geo_dt[, address_street := address_street %>% str_remove_all(",\\s?$")]
# Remove street addresses with no numbers (again deletes 'CONFIDENTIAL' like listings)
geo_dt <- geo_dt[str_detect(address_street, "\\d+")]
# Paste together a clean address
geo_dt[, address_full := paste0(address_street, ", ", city, ", ", state_abb, " ", zip5)]
geo_i <- geo_dt[state_abb == i]
geo_i
geocodeQueryCheck()
register_google
p_install_gh("dkahle/ggmap")
?install.packages()
remove.packages("ggmpa")
remove.packages("ggmap")
options(stringsAsFactors = F)
# Packages
library(pacman)
p_install_gh("dkahle/ggmap")
# Setup --------------------------------------------------------------------------------------------
# Options
options(stringsAsFactors = F)
# Packages
library(pacman)
# remove.packages("ggmap"); p_install_gh("dkahle/ggmap")
p_load(
ggplot2, ggthemes, latex2exp, Cairo,
maps, ggmap, sf,
parallel,
tidyverse, haven, httr, rvest,
data.table, lubridate, magrittr
)
# Register Google API key
register_google(
key = readLines("~/Dropbox/Keys/googleMapsAPI.txt"),
day_limit = 1e4
)
# Directories
dir_projects <- "~/Dropbox/Research/MyProjects/"
dir_project  <- dir_projects %>% paste0("HomelessShelters/")
dir_raw      <- dir_project %>% paste0("DataRaw/")
dir_geo      <- dir_project %>% paste0("DataGeo/")
# Load data ----------------------------------------------------------------------------------------
# Load the scraped data
scraped_dt <- readRDS(file = dir_raw %>% paste0("shelters_hsd.rds"))
# Create spatial data objects ----------------------------------------------------------------------
# Grab desired columns for spatial work (all uppercase, trimmed, squished) and force uniqueness
geo_dt <- scraped_dt[, .(
name = name %>% str_to_upper() %>% str_trim("both") %>% str_squish(),
lat_lon = lat_lon %>% str_trim("both") %>% str_squish(),
address_leaflet = address_leaflet %>% str_to_upper() %>% str_trim("both") %>% str_squish()
)] %>% unique()
# Drop shelters whose address in a PO Box or is not disclosed
# NOTE: Drops many women's shelters
geo_dt <- geo_dt[!str_detect(address_leaflet, "BOX")]
geo_dt <- geo_dt[!str_detect(address_leaflet, "POST OFFICE")]
geo_dt <- geo_dt[!str_detect(address_leaflet, "NO\\sADDRESS|NOT\\s")]
geo_dt <- geo_dt[!str_detect(address_leaflet, "SCATTERED SITE APTS")]
# Drop shelter with crazy street address
geo_dt <- geo_dt[!str_detect(address_leaflet, "632632628")]
# Drop phone numbers from addresses
geo_dt[, address_leaflet := str_remove_all(address_leaflet, "\\(\\d{3}\\)\\s?\\d{3}\\-\\d{4}")]
geo_dt[, address_leaflet := str_remove_all(address_leaflet, "\\d{3}\\-\\d{3}\\-\\d{4}")]
# Drop strange characters/coding 'Â€¨', '"', 'ADDRESS 1:', "\\'"
geo_dt[, address_leaflet := str_remove_all(address_leaflet, "Â€¨")]
geo_dt[, address_leaflet := str_remove_all(address_leaflet, '"')]
geo_dt[, address_leaflet := str_remove_all(address_leaflet, fixed("ADDRESS 1: "))]
geo_dt[, address_leaflet := str_remove_all(address_leaflet, fixed("\\'"))]
# Remove parentheticals
geo_dt[, address_leaflet := str_remove_all(address_leaflet, "\\(.*\\)")]
# Remove the last few specific elements from names
geo_dt[, address_leaflet :=
str_remove_all(address_leaflet, "OFFICE OF MENTAL HEALTH & MENTAL RETARDATION, ")
]
geo_dt[, address_leaflet :=
str_remove_all(address_leaflet, fixed("C/O WEST HEIGHTS HOUSE SHELTER @ "))
]
# Take care of multi-location addresses (addresses containing ampersands)
geo_dt <- rbindlist(list(
# No ampersands
geo_dt[!str_detect(address_leaflet, "\\&")],
# First number of ampersand addresses
geo_dt[str_detect(address_leaflet, "\\&")] %>%
mutate(address_leaflet = str_remove_all(address_leaflet, "\\d{2,3}\\s\\&\\s")) %>%
data.table(),
# Second number of ampersand addresses
geo_dt[str_detect(address_leaflet, "\\&")] %>%
mutate(address_leaflet = str_remove_all(address_leaflet, "\\s\\&\\s\\d{2,3}")) %>%
data.table()
))
# Split lat and lon
geo_dt[, c("lat_hsd", "lon_hsd") := tstrsplit(lat_lon, ",\\s")]
# Convert lat/lon to numeric
geo_dt[, `:=`(
lat_hsd = lat_hsd %>% as.numeric(),
lon_hsd = lon_hsd %>% as.numeric()
)]
# Drop lat_lon character feature
geo_dt[, lat_lon := NULL]
# Find the city and state (in the name)
set(
x = geo_dt,
j = "city_state",
value = geo_dt[, name] %>% str_split("\\s\\-\\s") %>% sapply(X = ., FUN = tail, n = 1)
)
# Separate city and state
geo_dt[, c("city", "state_abb") := tstrsplit(city_state, ", ")]
# Drop observations whose states do not match
geo_dt <- geo_dt[(state_abb %in% c(state.abb, "DC"))]
# Join state's full names
geo_dt %<>% merge(
y = data.table(state_abb = state.abb, state_name = state.name %>% str_to_upper()),
by = "state_abb",
all.x = T, all.y = F
)
# Add "WASHINGTON DC" as the state name for DC
geo_dt[state_abb == "DC", state_name := "WASHINGTON DC"]
# Find the zip code:
# (1/3) Last 9 numbers of the leaflet address
geo_dt[, zip := address_leaflet %>% str_extract("[0-9]{9}$")]
# (2/3) Last 5 numbers of the leaflet address
geo_dt[is.na(zip), zip := address_leaflet %>% str_extract("[0-9]{5}$")]
# (3/3) 5 numbers, "-", 4 numbers
geo_dt[str_detect(address_leaflet, "[0-9]{5}\\-[0-9]{4}"),
zip := address_leaflet %>% str_extract("[0-9]{5}\\-[0-9]{4}")
]
# Construct 5-digit zip
geo_dt[, zip5 := str_sub(zip, 1, 5)]
# Grab street address by removing city, state, zip code (and anything that follows)
geo_dt[, address_street :=
address_leaflet %>% str_remove(paste0(city, ", ", state_name, ".*")) %>% str_trim("both")
]
# Drop observations missing a street address
geo_dt <- geo_dt[address_street != ""]
# Remove city, zip from street addresses
geo_dt[, address_street := address_street %>% str_remove_all(paste0(city, ", ", zip))]
# Remove 'city,$'
geo_dt[, address_street := address_street %>% str_remove_all(paste0(city, ",\\s?$"))]
# Remove ',$'
geo_dt[, address_street := address_street %>% str_remove_all(",\\s?$")]
# Remove street addresses with no numbers (again deletes 'CONFIDENTIAL' like listings)
geo_dt <- geo_dt[str_detect(address_street, "\\d+")]
# Paste together a clean address
geo_dt[, address_full := paste0(address_street, ", ", city, ", ", state_abb, " ", zip5)]
i
i <- "AL"
geo_i <- geo_dt[state_abb == i]
ggmap::goog_day_limit()
ggmap::has_goog_key()
?ggmap::geocodeQueryCheck
?ggmap::geocodeQueryCheck()
ggmap::geocodeQueryCheck()
i
geo_i
geo_i <- geo_dt[state_abb == i]
coded_i <- mutate_geocode(geo_i, address_full, source = "google", output = "more")
coded_i
coded_i %>% dim
geo_i %>% dim
geo_i %>% unique %>% dim
saveRDS(
object = coded_i,
file = dir_geo %>% paste0("shelters_hsd_geocoded_", str_to_lower(i), ".rds")
)
saveRDS(
object = coded_i,
file = dir_geo %>% paste0("SheltersState/shelters_hsd_geocoded_", str_to_lower(i), ".rds")
)
tmp <- readRDS(paste0(dir_geo, "SheltersState/shelters_hsd_geocoded_al.rds"))
tmp
tmp %>% dim
rm(tmp)
?try
for (i in -2:3) print(i)
for (i in -2:3) print(i/i)
paste()
error
error()
ls()
options(stringsAsFactors = F)
# Load desired packages
library(pacman)
p_load(data.table, magrittr, readxl, stringr)
# Set directory
setwd("/Users/edwardarubin/Dropbox/Research/MyBooks/DataScience/Textbook/chapter8")
x <- "rollingsales_bronx.xls"
tmp <- read_xls(x, skip = 4) %>% data.table()
setnames(tmp, names(tmp) %>% str_to_lower() %>% str_replace_all(" ", "_"))
tmp
tmp
tmp$year_built %>% class
# Options
options(stringsAsFactors = F)
# Load desired packages
library(pacman)
p_load(data.table, magrittr, readxl, stringr)
# Set directory
setwd("/Users/edwardarubin/Dropbox/Research/MyBooks/DataScience/Textbook/chapter8")
# Load data and join data
full_dt <- lapply(
X = c(
"rollingsales_bronx.xls",
"rollingsales_brooklyn.xls",
"rollingsales_manhattan.xls",
"rollingsales_queens.xls",
"rollingsales_statenisland.xls"
),
FUN = function(x) {
# Load
tmp <- read_xls(x, skip = 4) %>% data.table()
# Change names
setnames(tmp, names(tmp) %>% str_to_lower() %>% str_replace_all(" ", "_"))
# Grab some variables
tmp <- tmp[, .(
borough, neighborhood, building_class_category, zip_code,
residential_units, commercial_units, total_units,
land_square_feet, gross_square_feet, year_built,
sale_price, sale_date
)]
# Limit to single-family dwelling types
tmp <- tmp[building_class_category %in% c(
"01 ONE FAMILY DWELLINGS",
"09 COOPS - WALKUP APARTMENTS", "10 COOPS - ELEVATOR APARTMENTS",
"12 CONDOS - WALKUP APARTMENTS", "13 CONDOS - ELEVATOR APARTMENTS",
"17 CONDO COOPS"
)]
# Require sale price between 10,000 and 10,000,000
tmp <- tmp[between(sale_price, 1e4, 1e7)]
# Require gross square feet between 0 and 5000
tmp <- tmp[between(gross_square_feet, 0, 5000, incbounds = F)]
# Return tmp data
return(tmp)
}
) %>% rbindlist()
# Calculate age
full_dt
# Options
options(stringsAsFactors = F)
# Load desired packages
library(pacman)
p_load(data.table, magrittr, readxl, stringr)
# Set directory
setwd("/Users/edwardarubin/Dropbox/Research/MyBooks/DataScience/Textbook/chapter8")
# Load data and join data
full_dt <- lapply(
X = c(
"rollingsales_bronx.xls",
"rollingsales_brooklyn.xls",
"rollingsales_manhattan.xls",
"rollingsales_queens.xls",
"rollingsales_statenisland.xls"
),
FUN = function(x) {
# Load
tmp <- read_xls(x, skip = 4) %>% data.table()
# Change names
setnames(tmp, names(tmp) %>% str_to_lower() %>% str_replace_all(" ", "_"))
# Grab some variables
tmp <- tmp[, .(
borough, neighborhood, building_class_category, zip_code,
residential_units, commercial_units, total_units,
land_square_feet, gross_square_feet, year_built,
sale_price, sale_date
)]
# Limit to single-family dwelling types
tmp <- tmp[building_class_category %in% c(
"01 ONE FAMILY DWELLINGS",
"09 COOPS - WALKUP APARTMENTS", "10 COOPS - ELEVATOR APARTMENTS",
"12 CONDOS - WALKUP APARTMENTS", "13 CONDOS - ELEVATOR APARTMENTS",
"17 CONDO COOPS"
)]
# Require sale price between 10,000 and 10,000,000
tmp <- tmp[between(sale_price, 1e4, 1e7)]
# Require gross square feet between 0 and 5000
tmp <- tmp[between(gross_square_feet, 0, 5000, incbounds = F)]
# Return tmp data
return(tmp)
}
) %>% rbindlist()
# Add: year-of-sale and age
full_dt[, sale_year := sale_date %>% ymd() %>% year()]
full_dt[, age := sale_year - year_build]
# Save
fwrite(
x = full_dt,
file = "home_sales_nyc.csv"
)
# Options
options(stringsAsFactors = F)
# Load desired packages
library(pacman)
p_load(data.table, lubridate, magrittr, readxl, stringr)
# Set directory
setwd("/Users/edwardarubin/Dropbox/Research/MyBooks/DataScience/Textbook/chapter8")
# Load data and join data
full_dt <- lapply(
X = c(
"rollingsales_bronx.xls",
"rollingsales_brooklyn.xls",
"rollingsales_manhattan.xls",
"rollingsales_queens.xls",
"rollingsales_statenisland.xls"
),
FUN = function(x) {
# Load
tmp <- read_xls(x, skip = 4) %>% data.table()
# Change names
setnames(tmp, names(tmp) %>% str_to_lower() %>% str_replace_all(" ", "_"))
# Grab some variables
tmp <- tmp[, .(
borough, neighborhood, building_class_category, zip_code,
residential_units, commercial_units, total_units,
land_square_feet, gross_square_feet, year_built,
sale_price, sale_date
)]
# Limit to single-family dwelling types
tmp <- tmp[building_class_category %in% c(
"01 ONE FAMILY DWELLINGS",
"09 COOPS - WALKUP APARTMENTS", "10 COOPS - ELEVATOR APARTMENTS",
"12 CONDOS - WALKUP APARTMENTS", "13 CONDOS - ELEVATOR APARTMENTS",
"17 CONDO COOPS"
)]
# Require sale price between 10,000 and 10,000,000
tmp <- tmp[between(sale_price, 1e4, 1e7)]
# Require gross square feet between 0 and 5000
tmp <- tmp[between(gross_square_feet, 0, 5000, incbounds = F)]
# Return tmp data
return(tmp)
}
) %>% rbindlist()
# Add: year-of-sale and age
full_dt[, sale_year := sale_date %>% ymd() %>% year()]
full_dt[, age := sale_year - year_build]
# Save
fwrite(
x = full_dt,
file = "home_sales_nyc.csv"
)
# Options
options(stringsAsFactors = F)
# Load desired packages
library(pacman)
p_load(data.table, lubridate, magrittr, readxl, stringr)
# Set directory
setwd("/Users/edwardarubin/Dropbox/Research/MyBooks/DataScience/Textbook/chapter8")
# Load data and join data
full_dt <- lapply(
X = c(
"rollingsales_bronx.xls",
"rollingsales_brooklyn.xls",
"rollingsales_manhattan.xls",
"rollingsales_queens.xls",
"rollingsales_statenisland.xls"
),
FUN = function(x) {
# Load
tmp <- read_xls(x, skip = 4) %>% data.table()
# Change names
setnames(tmp, names(tmp) %>% str_to_lower() %>% str_replace_all(" ", "_"))
# Grab some variables
tmp <- tmp[, .(
borough, neighborhood, building_class_category, zip_code,
residential_units, commercial_units, total_units,
land_square_feet, gross_square_feet, year_built,
sale_price, sale_date
)]
# Limit to single-family dwelling types
tmp <- tmp[building_class_category %in% c(
"01 ONE FAMILY DWELLINGS",
"09 COOPS - WALKUP APARTMENTS", "10 COOPS - ELEVATOR APARTMENTS",
"12 CONDOS - WALKUP APARTMENTS", "13 CONDOS - ELEVATOR APARTMENTS",
"17 CONDO COOPS"
)]
# Require sale price between 10,000 and 10,000,000
tmp <- tmp[between(sale_price, 1e4, 1e7)]
# Require gross square feet between 0 and 5000
tmp <- tmp[between(gross_square_feet, 0, 5000, incbounds = F)]
# Return tmp data
return(tmp)
}
) %>% rbindlist()
# Add: year-of-sale and age
full_dt[, sale_year := sale_date %>% ymd() %>% year()]
full_dt[, age := sale_year - year_built]
# Save
fwrite(
x = full_dt,
file = "home_sales_nyc.csv"
)
full_dt[,age] %>% summary
full_dt[age==2018]
# Options
options(stringsAsFactors = F)
# Load desired packages
library(pacman)
p_load(data.table, lubridate, magrittr, readxl, stringr)
# Set directory
setwd("/Users/edwardarubin/Dropbox/Research/MyBooks/DataScience/Textbook/chapter8")
# Load data and join data
full_dt <- lapply(
X = c(
"rollingsales_bronx.xls",
"rollingsales_brooklyn.xls",
"rollingsales_manhattan.xls",
"rollingsales_queens.xls",
"rollingsales_statenisland.xls"
),
FUN = function(x) {
# Load
tmp <- read_xls(x, skip = 4) %>% data.table()
# Change names
setnames(tmp, names(tmp) %>% str_to_lower() %>% str_replace_all(" ", "_"))
# Grab some variables
tmp <- tmp[, .(
borough, neighborhood, building_class_category, zip_code,
residential_units, commercial_units, total_units,
land_square_feet, gross_square_feet, year_built,
sale_price, sale_date
)]
# Limit to single-family dwelling types
tmp <- tmp[building_class_category %in% c(
"01 ONE FAMILY DWELLINGS",
"09 COOPS - WALKUP APARTMENTS", "10 COOPS - ELEVATOR APARTMENTS",
"12 CONDOS - WALKUP APARTMENTS", "13 CONDOS - ELEVATOR APARTMENTS",
"17 CONDO COOPS"
)]
# Require sale price between 10,000 and 10,000,000
tmp <- tmp[between(sale_price, 1e4, 1e7)]
# Require gross square feet between 0 and 5000
tmp <- tmp[between(gross_square_feet, 0, 5000, incbounds = F)]
# Return tmp data
return(tmp)
}
) %>% rbindlist()
# Add: year-of-sale and age
full_dt[, sale_year := sale_date %>% ymd() %>% year()]
full_dt[, age := sale_year - year_built]
# Drop year_build == 0
full_dt <- full_dt[year_built != 0]
# Save
fwrite(
x = full_dt,
file = "home_sales_nyc.csv"
)
full_dt$year_built %>% summary
full_dt$age %>% summary
# Options
options(stringsAsFactors = F)
# Load desired packages
library(pacman)
p_load(data.table, lubridate, magrittr, readxl, stringr)
# Set directory
setwd("/Users/edwardarubin/Dropbox/Research/MyBooks/DataScience/Textbook/chapter8")
# Load data and join data
full_dt <- lapply(
X = c(
"rollingsales_bronx.xls",
"rollingsales_brooklyn.xls",
"rollingsales_manhattan.xls",
"rollingsales_queens.xls",
"rollingsales_statenisland.xls"
),
FUN = function(x) {
# Load
tmp <- read_xls(x, skip = 4) %>% data.table()
# Change names
setnames(tmp, names(tmp) %>% str_to_lower() %>% str_replace_all(" ", "_"))
# Grab some variables
tmp <- tmp[, .(
borough, neighborhood, building_class_category, zip_code,
residential_units, commercial_units, total_units,
land_square_feet, gross_square_feet, year_built,
sale_price, sale_date
)]
# Limit to single-family dwelling types
tmp <- tmp[building_class_category %in% c(
"01 ONE FAMILY DWELLINGS",
"09 COOPS - WALKUP APARTMENTS", "10 COOPS - ELEVATOR APARTMENTS",
"12 CONDOS - WALKUP APARTMENTS", "13 CONDOS - ELEVATOR APARTMENTS",
"17 CONDO COOPS"
)]
# Require sale price between 10,000 and 10,000,000
tmp <- tmp[between(sale_price, 1e4, 1e7)]
# Require gross square feet between 0 and 5000
tmp <- tmp[between(gross_square_feet, 0, 5000, incbounds = F)]
# Return tmp data
return(tmp)
}
) %>% rbindlist()
# Add: year-of-sale and age
full_dt[, sale_year := sale_date %>% ymd() %>% year()]
full_dt[, age := sale_year - year_built]
# Drop year_build == 0
full_dt <- full_dt[year_built != 0]
# Drop age > 120
full_dt <- full_dt[between(age, 0, 120)]
# Save
fwrite(
x = full_dt,
file = "home_sales_nyc.csv"
)
full_dt
sale_df <- full_dt
sale_df
ggplot(data = sale_df, aes(x = as.character(sale_year), y = sale_price)) + geom_box()
library(ggplot2)
library(ggthemes)
ggplot(data = sale_df, aes(x = as.character(sale_year), y = sale_price)) + geom_box()
ggplot(data = sale_df, aes(x = as.character(sale_year), y = sale_price)) + geom_boxplot()
ggplot(data = sale_df, aes(x = as.character(month(ymd(sale_date))), y = sale_price)) + geom_boxplot()
ggplot(data = sale_df, aes(x = as.character(neighborhood), y = sale_price)) + geom_boxplot()
ggplot(data = sale_df, aes(x = as.character(borough), y = sale_price)) + geom_boxplot()
ggplot(data = sale_df, aes(x = as.character(borough), y = sale_price)) + stat_ydensity()
